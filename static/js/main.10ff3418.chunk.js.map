{"version":3,"sources":["GamePine/utils.js","GamePine/bump.js","GamePine/index.js","App.js","index.js"],"names":["keyboard","keyCode","key","code","isDown","isUp","press","undefined","release","downHandler","event","preventDefault","upHandler","window","addEventListener","bind","Bump","renderingEngine","PIXI","Error","this","renderer","sprite","gx","Object","defineProperty","get","getGlobalPosition","x","enumerable","configurable","gy","y","centerX","width","centerY","height","halfWidth","halfHeight","xAnchorOffset","anchor","yAnchorOffset","circular","radius","_bumpPropertiesAdded","point","shape","left","right","top","bottom","hit","addCollisionProperties","vx","vy","Math","sqrt","c1","c2","global","magnitude","combinedRadii","overlap","dx","dy","bounce","s","quantumPadding","bounceOffSurface","xSide","ySide","p1A","p1B","p2A","p2B","mass","vxHalf","abs","vyHalf","lx","ly","dp1","dp2","dp3","dp4","arrayOfCircles","i","length","j","movingCircleCollision","r1","r2","collision","combinedHalfWidths","combinedHalfHeights","overlapX","overlapY","region","c1x","c1y","r1x","r1y","hitTestRectangle","hitTestCirclePoint","diameter","hitTestCircle","rectangleCollision","circlePointCollision","circleCollision","o","p1","p2","container","extra","parent","Set","add","size","bounds","dimension","axis","a","b","react","hitTestPoint","hitTestCircleRectangle","circleRectangleCollision","aIsASprite","bIsASprite","Array","spriteVsArray","findCollisionType","circleVsCircle","circleVsRectangle","rectangleVsRectangle","GamePine","props","ground","woods","builds","useState","backwoodsColor","initSetting","name","run_images","animationSpeed","leftSet","scale","pivot","rightSet","xiaoxin","img_url","backgroundsJson","id","date","title","detail","bulidsJson","Application","loader","shared","resources","Sprite","TilingSprite","Container","TextStyle","Graphics","Text","AnimatedSprite","Texture","Ticker","currHitBuild","handleKeyPressRight","delta","tilePosition","handleKeyPressLeft","useEffect","app","document","getElementById","appendChild","view","console","log","querySelector","style","bump","progressPine","zIndex","grogressPineBackground","beginFill","drawRect","endFill","addChild","progressStyle","fontFamily","fontSize","fill","stroke","strokeThickness","dropShadow","dropShadowColor","dropShadowBlur","dropShadowAngle","PI","dropShadowDistance","progressMessage","set","stage","sortableChildren","detailsPine","yearsStyle","dropShadowAlpha","yearsText","titleStyle","titleText","detailsStyle","wordWrap","wordWrapWidth","breakWords","detailsText","textElements","resourcesUrl","forEach","element","push","on","resource","currProgressNumber","progress","toFixed","text","setTimeout","visible","load","currBuildSprite","texture","groundJson","woodsJson","ticker","keyRight","returnHitTestTicker","animatedSpriteXiaoxin","play","remove","stop","keyLeft","textureArrayRight","from","sprites","children","currName","textureCacheIds","hitTestTicker","display","App","className","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.10ff3418.chunk.js","sourcesContent":["/**\n * 键盘监听\n * @param keyCode\n */\nexport function keyboard (keyCode) {\n  const key = {}\n  key.code = keyCode\n  key.isDown = false\n  key.isUp = true\n  key.press = undefined\n  key.release = undefined\n  // The `downHandler`\n  key.downHandler = event => {\n    if (event.keyCode === key.code) {\n      if (key.isUp && key.press) key.press()\n      key.isDown = true\n      key.isUp = false\n    }\n    event.preventDefault()\n  }\n\n  // The `upHandler`\n  key.upHandler = event => {\n    if (event.keyCode === key.code) {\n      if (key.isDown && key.release) key.release()\n      key.isDown = false\n      key.isUp = true\n    }\n    event.preventDefault()\n  }\n\n  // Attach event listeners\n  window.addEventListener(\n    'keydown', key.downHandler.bind(key), false\n  )\n  window.addEventListener(\n    'keyup', key.upHandler.bind(key), false\n  )\n  return key\n}\n","import * as PIXI from 'pixi.js'\n\n/**\n * 碰撞库\n * 中文参考文章：https://blog.csdn.net/FE_dev/article/details/87646110\n */\nexport default class Bump {\n  constructor (renderingEngine = PIXI) {\n    if (renderingEngine === undefined) {\n      throw new Error(\n        'Please assign a rendering engine in the constructor before using bump.js')\n    }\n\n    this.renderer = 'pixi'\n  }\n\n  // `addCollisionProperties` adds extra properties to sprites to help\n  // simplify the collision code. It won't add these properties if they\n  // already exist on the sprite. After these properties have been\n  // added, this methods adds a Boolean property to the sprite called `_bumpPropertiesAdded`\n  // and sets it to `true` to flag that the sprite has these\n  // new properties\n  addCollisionProperties (sprite) {\n    // Add properties to Pixi sprites\n    if (this.renderer === 'pixi') {\n      // gx\n      if (sprite.gx === undefined) {\n        Object.defineProperty(sprite, 'gx', {\n          get () { return sprite.getGlobalPosition().x },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // gy\n      if (sprite.gy === undefined) {\n        Object.defineProperty(sprite, 'gy', {\n          get () { return sprite.getGlobalPosition().y },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // centerX\n      if (sprite.centerX === undefined) {\n        Object.defineProperty(sprite, 'centerX', {\n          get () { return sprite.x + sprite.width / 2 },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // centerY\n      if (sprite.centerY === undefined) {\n        Object.defineProperty(sprite, 'centerY', {\n          get () { return sprite.y + sprite.height / 2 },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // halfWidth\n      if (sprite.halfWidth === undefined) {\n        Object.defineProperty(sprite, 'halfWidth', {\n          get () { return sprite.width / 2 },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // halfHeight\n      if (sprite.halfHeight === undefined) {\n        Object.defineProperty(sprite, 'halfHeight', {\n          get () { return sprite.height / 2 },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // xAnchorOffset\n      if (sprite.xAnchorOffset === undefined) {\n        Object.defineProperty(sprite, 'xAnchorOffset', {\n          get () {\n            if (sprite.anchor !== undefined) {\n              return sprite.width * sprite.anchor.x\n            } else {\n              return 0\n            }\n          },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // yAnchorOffset\n      if (sprite.yAnchorOffset === undefined) {\n        Object.defineProperty(sprite, 'yAnchorOffset', {\n          get () {\n            if (sprite.anchor !== undefined) {\n              return sprite.height * sprite.anchor.y\n            } else {\n              return 0\n            }\n          },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      if (sprite.circular && sprite.radius === undefined) {\n        Object.defineProperty(sprite, 'radius', {\n          get () { return sprite.width / 2 },\n          enumerable: true,\n          configurable: true,\n        })\n      }\n\n      // Earlier code - not needed now.\n      /*\n      Object.defineProperties(sprite, {\n        \"gx\": {\n          get(){return sprite.getGlobalPosition().x},\n          enumerable: true, configurable: true\n        },\n        \"gy\": {\n          get(){return sprite.getGlobalPosition().y},\n          enumerable: true, configurable: true\n        },\n        \"centerX\": {\n          get(){return sprite.x + sprite.width / 2},\n          enumerable: true, configurable: true\n        },\n        \"centerY\": {\n          get(){return sprite.y + sprite.height / 2},\n          enumerable: true, configurable: true\n        },\n        \"halfWidth\": {\n          get(){return sprite.width / 2},\n          enumerable: true, configurable: true\n        },\n        \"halfHeight\": {\n          get(){return sprite.height / 2},\n          enumerable: true, configurable: true\n        },\n        \"xAnchorOffset\": {\n          get(){\n            if (sprite.anchor !== undefined) {\n              return sprite.height * sprite.anchor.x;\n            } else {\n              return 0;\n            }\n          },\n          enumerable: true, configurable: true\n        },\n        \"yAnchorOffset\": {\n          get(){\n            if (sprite.anchor !== undefined) {\n              return sprite.width * sprite.anchor.y;\n            } else {\n              return 0;\n            }\n          },\n          enumerable: true, configurable: true\n        }\n      });\n      */\n    }\n\n    // Add a Boolean `_bumpPropertiesAdded` property to the sprite to flag it\n    // as having these new properties\n    sprite._bumpPropertiesAdded = true\n  }\n\n  /*\n  hitTestPoint\n  ------------\n\n  Use it to find out if a point is touching a circlular or rectangular sprite.\n  Parameters:\n  a. An object with `x` and `y` properties.\n  b. A sprite object with `x`, `y`, `centerX` and `centerY` properties.\n  If the sprite has a `radius` property, the function will interpret\n  the shape as a circle.\n  */\n\n  hitTestPoint (point, sprite) {\n    // Add collision properties\n    if (!sprite._bumpPropertiesAdded) this.addCollisionProperties(sprite)\n\n    let shape, left, right, top, bottom, hit\n\n    // Find out if the sprite is rectangular or circular depending\n    // on whether it has a `radius` property\n    if (sprite.radius) {\n      shape = 'circle'\n    } else {\n      shape = 'rectangle'\n    }\n\n    // Rectangle\n    if (shape === 'rectangle') {\n      // Get the position of the sprite's edges\n      left = sprite.x - sprite.xAnchorOffset\n      right = sprite.x + sprite.width - sprite.xAnchorOffset\n      top = sprite.y - sprite.yAnchorOffset\n      bottom = sprite.y + sprite.height - sprite.yAnchorOffset\n\n      // Find out if the point is intersecting the rectangle\n      hit = point.x > left && point.x < right && point.y > top && point.y <\n        bottom\n    }\n\n    // Circle\n    if (shape === 'circle') {\n      // Find the distance between the point and the\n      // center of the circle\n      const vx = point.x - sprite.x - (sprite.width / 2) + sprite.xAnchorOffset\n      const vy = point.y - sprite.y - (sprite.height / 2) + sprite.yAnchorOffset\n      const magnitude = Math.sqrt(vx * vx + vy * vy)\n\n      // The point is intersecting the circle if the magnitude\n      // (distance) is less than the circle's radius\n      hit = magnitude < sprite.radius\n    }\n\n    // `hit` will be either `true` or `false`\n    return hit\n  }\n\n  /*\n  hitTestCircle\n  -------------\n\n  Use it to find out if two circular sprites are touching.\n  Parameters:\n  a. A sprite object with `centerX`, `centerY` and `radius` properties.\n  b. A sprite object with `centerX`, `centerY` and `radius`.\n  */\n\n  hitTestCircle (c1, c2, global = false) {\n    // Add collision properties\n    if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1)\n    if (!c2._bumpPropertiesAdded) this.addCollisionProperties(c2)\n\n    let vx, vy, magnitude, combinedRadii, hit\n\n    // Calculate the vector between the circles’ center points\n    if (global) {\n      // Use global coordinates\n      vx = (c2.gx + (c2.width / 2) - c2.xAnchorOffset) -\n        (c1.gx + (c1.width / 2) - c1.xAnchorOffset)\n      vy = (c2.gy + (c2.width / 2) - c2.yAnchorOffset) -\n        (c1.gy + (c1.width / 2) - c1.yAnchorOffset)\n    } else {\n      // Use local coordinates\n      vx = (c2.x + (c2.width / 2) - c2.xAnchorOffset) -\n        (c1.x + (c1.width / 2) - c1.xAnchorOffset)\n      vy = (c2.y + (c2.width / 2) - c2.yAnchorOffset) -\n        (c1.y + (c1.width / 2) - c1.yAnchorOffset)\n    }\n\n    // Find the distance between the circles by calculating\n    // the vector's magnitude (how long the vector is)\n    magnitude = Math.sqrt(vx * vx + vy * vy)\n\n    // Add together the circles' total radii\n    combinedRadii = c1.radius + c2.radius\n\n    // Set `hit` to `true` if the distance between the circles is\n    // less than their `combinedRadii`\n    hit = magnitude < combinedRadii\n\n    // `hit` will be either `true` or `false`\n    return hit\n  }\n\n  /*\n  circleCollision\n  ---------------\n\n  Use it to prevent a moving circular sprite from overlapping and optionally\n  bouncing off a non-moving circular sprite.\n  Parameters:\n  a. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\n  b. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\n  c. Optional: true or false to indicate whether or not the first sprite\n  should bounce off the second sprite.\n  The sprites can contain an optional mass property that should be greater than 1.\n\n  */\n\n  circleCollision (c1, c2, bounce = false, global = false) {\n    // Add collision properties\n    if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1)\n    if (!c2._bumpPropertiesAdded) this.addCollisionProperties(c2)\n\n    let magnitude\n    let combinedRadii\n    let overlap\n    let vx\n    let vy\n    let dx\n    let dy\n    const s = {}\n    let hit = false\n\n    // Calculate the vector between the circles’ center points\n\n    if (global) {\n      // Use global coordinates\n      vx = (c2.gx + (c2.width / 2) - c2.xAnchorOffset) -\n        (c1.gx + (c1.width / 2) - c1.xAnchorOffset)\n      vy = (c2.gy + (c2.width / 2) - c2.yAnchorOffset) -\n        (c1.gy + (c1.width / 2) - c1.yAnchorOffset)\n    } else {\n      // Use local coordinates\n      vx = (c2.x + (c2.width / 2) - c2.xAnchorOffset) -\n        (c1.x + (c1.width / 2) - c1.xAnchorOffset)\n      vy = (c2.y + (c2.width / 2) - c2.yAnchorOffset) -\n        (c1.y + (c1.width / 2) - c1.yAnchorOffset)\n    }\n\n    // Find the distance between the circles by calculating\n    // the vector's magnitude (how long the vector is)\n    magnitude = Math.sqrt(vx * vx + vy * vy)\n\n    // Add together the circles' combined half-widths\n    combinedRadii = c1.radius + c2.radius\n\n    // Figure out if there's a collision\n    if (magnitude < combinedRadii) {\n      // Yes, a collision is happening\n      hit = true\n\n      // Find the amount of overlap between the circles\n      overlap = combinedRadii - magnitude\n\n      // Add some \"quantum padding\". This adds a tiny amount of space\n      // between the circles to reduce their surface tension and make\n      // them more slippery. \"0.3\" is a good place to start but you might\n      // need to modify this slightly depending on the exact behaviour\n      // you want. Too little and the balls will feel sticky, too much\n      // and they could start to jitter if they're jammed together\n      const quantumPadding = 0.3\n      overlap += quantumPadding\n\n      // Normalize the vector\n      // These numbers tell us the direction of the collision\n      dx = vx / magnitude\n      dy = vy / magnitude\n\n      // Move circle 1 out of the collision by multiplying\n      // the overlap with the normalized vector and subtract it from\n      // circle 1's position\n      c1.x -= overlap * dx\n      c1.y -= overlap * dy\n\n      // Bounce\n      if (bounce) {\n        // Create a collision vector object, `s` to represent the bounce \"surface\".\n        // Find the bounce surface's x and y properties\n        // (This represents the normal of the distance vector between the circles)\n        s.x = vy\n        s.y = -vx\n\n        // Bounce c1 off the surface\n        this.bounceOffSurface(c1, s)\n      }\n    }\n    return hit\n  }\n\n  /*\n  movingCircleCollision\n  ---------------------\n\n  Use it to make two moving circles bounce off each other.\n  Parameters:\n  a. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\n  b. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\n  The sprites can contain an optional mass property that should be greater than 1.\n\n  */\n\n  movingCircleCollision (c1, c2, global = false) {\n    // Add collision properties\n    if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1)\n    if (!c2._bumpPropertiesAdded) this.addCollisionProperties(c2)\n\n    let combinedRadii\n    let overlap\n    let xSide\n    let ySide\n    // `s` refers to the distance vector between the circles\n    const s = {}\n    const p1A = {}\n    const p1B = {}\n    const p2A = {}\n    const p2B = {}\n    let hit = false\n\n    // Apply mass, if the circles have mass properties\n    c1.mass = c1.mass || 1\n    c2.mass = c2.mass || 1\n\n    // Calculate the vector between the circles’ center points\n    if (global) {\n      // Use global coordinates\n      s.vx = (c2.gx + c2.radius - c2.xAnchorOffset) -\n        (c1.gx + c1.radius - c1.xAnchorOffset)\n      s.vy = (c2.gy + c2.radius - c2.yAnchorOffset) -\n        (c1.gy + c1.radius - c1.yAnchorOffset)\n    } else {\n      // Use local coordinates\n      s.vx = (c2.x + c2.radius - c2.xAnchorOffset) -\n        (c1.x + c1.radius - c1.xAnchorOffset)\n      s.vy = (c2.y + c2.radius - c2.yAnchorOffset) -\n        (c1.y + c1.radius - c1.yAnchorOffset)\n    }\n\n    // Find the distance between the circles by calculating\n    // the vector's magnitude (how long the vector is)\n    s.magnitude = Math.sqrt(s.vx * s.vx + s.vy * s.vy)\n\n    // Add together the circles' combined half-widths\n    combinedRadii = c1.radius + c2.radius\n\n    // Figure out if there's a collision\n    if (s.magnitude < combinedRadii) {\n      // Yes, a collision is happening\n      hit = true\n\n      // Find the amount of overlap between the circles\n      overlap = combinedRadii - s.magnitude\n\n      // Add some \"quantum padding\" to the overlap\n      overlap += 0.3\n\n      // Normalize the vector.\n      // These numbers tell us the direction of the collision\n      s.dx = s.vx / s.magnitude\n      s.dy = s.vy / s.magnitude\n\n      // Find the collision vector.\n      // Divide it in half to share between the circles, and make it absolute\n      s.vxHalf = Math.abs(s.dx * overlap / 2)\n      s.vyHalf = Math.abs(s.dy * overlap / 2);\n\n      // Find the side that the collision is occurring on\n      (c1.x > c2.x) ? xSide = 1 : xSide = -1;\n      (c1.y > c2.y) ? ySide = 1 : ySide = -1\n\n      // Move c1 out of the collision by multiplying\n      // the overlap with the normalized vector and adding it to\n      // the circles' positions\n      c1.x = c1.x + (s.vxHalf * xSide)\n      c1.y = c1.y + (s.vyHalf * ySide)\n\n      // Move c2 out of the collision\n      c2.x = c2.x + (s.vxHalf * -xSide)\n      c2.y = c2.y + (s.vyHalf * -ySide)\n\n      // 1. Calculate the collision surface's properties\n\n      // Find the surface vector's left normal\n      s.lx = s.vy\n      s.ly = -s.vx\n\n      // 2. Bounce c1 off the surface (s)\n\n      // Find the dot product between c1 and the surface\n      const dp1 = c1.vx * s.dx + c1.vy * s.dy\n\n      // Project c1's velocity onto the collision surface\n      p1A.x = dp1 * s.dx\n      p1A.y = dp1 * s.dy\n\n      // Find the dot product of c1 and the surface's left normal (s.lx and s.ly)\n      const dp2 = c1.vx * (s.lx / s.magnitude) + c1.vy * (s.ly / s.magnitude)\n\n      // Project the c1's velocity onto the surface's left normal\n      p1B.x = dp2 * (s.lx / s.magnitude)\n      p1B.y = dp2 * (s.ly / s.magnitude)\n\n      // 3. Bounce c2 off the surface (s)\n\n      // Find the dot product between c2 and the surface\n      const dp3 = c2.vx * s.dx + c2.vy * s.dy\n\n      // Project c2's velocity onto the collision surface\n      p2A.x = dp3 * s.dx\n      p2A.y = dp3 * s.dy\n\n      // Find the dot product of c2 and the surface's left normal (s.lx and s.ly)\n      const dp4 = c2.vx * (s.lx / s.magnitude) + c2.vy * (s.ly / s.magnitude)\n\n      // Project c2's velocity onto the surface's left normal\n      p2B.x = dp4 * (s.lx / s.magnitude)\n      p2B.y = dp4 * (s.ly / s.magnitude)\n\n      // 4. Calculate the bounce vectors\n\n      // Bounce c1\n      // using p1B and p2A\n      c1.bounce = {}\n      c1.bounce.x = p1B.x + p2A.x\n      c1.bounce.y = p1B.y + p2A.y\n\n      // Bounce c2\n      // using p1A and p2B\n      c2.bounce = {}\n      c2.bounce.x = p1A.x + p2B.x\n      c2.bounce.y = p1A.y + p2B.y\n\n      // Add the bounce vector to the circles' velocity\n      // and add mass if the circle has a mass property\n      c1.vx = c1.bounce.x / c1.mass\n      c1.vy = c1.bounce.y / c1.mass\n      c2.vx = c2.bounce.x / c2.mass\n      c2.vy = c2.bounce.y / c2.mass\n    }\n    return hit\n  }\n\n  /*\n  multipleCircleCollision\n  -----------------------\n\n  Checks all the circles in an array for a collision against\n  all the other circles in an array, using `movingCircleCollision` (above)\n  */\n\n  multipleCircleCollision (arrayOfCircles, global = false) {\n    for (let i = 0; i < arrayOfCircles.length; i++) {\n      // The first circle to use in the collision check\n      var c1 = arrayOfCircles[i]\n      for (let j = i + 1; j < arrayOfCircles.length; j++) {\n        // The second circle to use in the collision check\n        const c2 = arrayOfCircles[j]\n\n        // Check for a collision and bounce the circles apart if\n        // they collide. Use an optional `mass` property on the sprite\n        // to affect the bounciness of each marble\n        this.movingCircleCollision(c1, c2, global)\n      }\n    }\n  }\n\n  /*\n  rectangleCollision\n  ------------------\n\n  Use it to prevent two rectangular sprites from overlapping.\n  Optionally, make the first rectangle bounce off the second rectangle.\n  Parameters:\n  a. A sprite object with `x`, `y` `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n  b. A sprite object with `x`, `y` `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n  c. Optional: true or false to indicate whether or not the first sprite\n  should bounce off the second sprite.\n  */\n\n  rectangleCollision (\n    r1, r2, bounce = false, global = true,\n  ) {\n    // Add collision properties\n    if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1)\n    if (!r2._bumpPropertiesAdded) this.addCollisionProperties(r2)\n\n    let collision, combinedHalfWidths, combinedHalfHeights,\n      overlapX, overlapY, vx, vy\n\n    // Calculate the distance vector\n    if (global) {\n      vx = (r1.gx + Math.abs(r1.halfWidth) - r1.xAnchorOffset) -\n        (r2.gx + Math.abs(r2.halfWidth) - r2.xAnchorOffset)\n      vy = (r1.gy + Math.abs(r1.halfHeight) - r1.yAnchorOffset) -\n        (r2.gy + Math.abs(r2.halfHeight) - r2.yAnchorOffset)\n    } else {\n      // vx = r1.centerX - r2.centerX;\n      // vy = r1.centerY - r2.centerY;\n      vx = (r1.x + Math.abs(r1.halfWidth) - r1.xAnchorOffset) -\n        (r2.x + Math.abs(r2.halfWidth) - r2.xAnchorOffset)\n      vy = (r1.y + Math.abs(r1.halfHeight) - r1.yAnchorOffset) -\n        (r2.y + Math.abs(r2.halfHeight) - r2.yAnchorOffset)\n    }\n\n    // Figure out the combined half-widths and half-heights\n    combinedHalfWidths = Math.abs(r1.halfWidth) + Math.abs(r2.halfWidth)\n    combinedHalfHeights = Math.abs(r1.halfHeight) + Math.abs(r2.halfHeight)\n\n    // Check whether vx is less than the combined half widths\n    if (Math.abs(vx) < combinedHalfWidths) {\n      // A collision might be occurring!\n      // Check whether vy is less than the combined half heights\n      if (Math.abs(vy) < combinedHalfHeights) {\n        // A collision has occurred! This is good!\n        // Find out the size of the overlap on both the X and Y axes\n        overlapX = combinedHalfWidths - Math.abs(vx)\n        overlapY = combinedHalfHeights - Math.abs(vy)\n\n        // The collision has occurred on the axis with the\n        //* smallest* amount of overlap. Let's figure out which\n        // axis that is\n\n        if (overlapX >= overlapY) {\n          // The collision is happening on the X axis\n          // But on which side? vy can tell us\n\n          if (vy > 0) {\n            collision = 'top'\n            // Move the rectangle out of the collision\n            r1.y = r1.y + overlapY\n          } else {\n            collision = 'bottom'\n            // Move the rectangle out of the collision\n            r1.y = r1.y - overlapY\n          }\n\n          // Bounce\n          if (bounce) {\n            r1.vy *= -1\n\n            /* Alternative\n            //Find the bounce surface's vx and vy properties\n            var s = {};\n            s.vx = r2.x - r2.x + r2.width;\n            s.vy = 0;\n\n            //Bounce r1 off the surface\n            //this.bounceOffSurface(r1, s);\n            */\n          }\n        } else {\n          // The collision is happening on the Y axis\n          // But on which side? vx can tell us\n\n          if (vx > 0) {\n            collision = 'left'\n            // Move the rectangle out of the collision\n            r1.x = r1.x + overlapX\n          } else {\n            collision = 'right'\n            // Move the rectangle out of the collision\n            r1.x = r1.x - overlapX\n          }\n\n          // Bounce\n          if (bounce) {\n            r1.vx *= -1\n\n            /* Alternative\n            //Find the bounce surface's vx and vy properties\n            var s = {};\n            s.vx = 0;\n            s.vy = r2.y - r2.y + r2.height;\n\n            //Bounce r1 off the surface\n            this.bounceOffSurface(r1, s);\n            */\n          }\n        }\n      } else {\n        // No collision\n      }\n    } else {\n      // No collision\n    }\n\n    // Return the collision string. it will be either \"top\", \"right\",\n    // \"bottom\", or \"left\" depending on which side of r1 is touching r2.\n    return collision\n  }\n\n  /*\n  hitTestRectangle\n  ----------------\n\n  Use it to find out if two rectangular sprites are touching.\n  Parameters:\n  a. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n  b. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n\n  */\n\n  hitTestRectangle (r1, r2, global = false) {\n    // Add collision properties\n    if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1)\n    if (!r2._bumpPropertiesAdded) this.addCollisionProperties(r2)\n\n    let hit, combinedHalfWidths, combinedHalfHeights, vx, vy\n\n    // A variable to determine whether there's a collision\n    hit = false\n\n    // Calculate the distance vector\n    if (global) {\n      vx = (r1.gx + Math.abs(r1.halfWidth) - r1.xAnchorOffset) -\n        (r2.gx + Math.abs(r2.halfWidth) - r2.xAnchorOffset)\n      vy = (r1.gy + Math.abs(r1.halfHeight) - r1.yAnchorOffset) -\n        (r2.gy + Math.abs(r2.halfHeight) - r2.yAnchorOffset)\n    } else {\n      vx = (r1.x + Math.abs(r1.halfWidth) - r1.xAnchorOffset) -\n        (r2.x + Math.abs(r2.halfWidth) - r2.xAnchorOffset)\n      vy = (r1.y + Math.abs(r1.halfHeight) - r1.yAnchorOffset) -\n        (r2.y + Math.abs(r2.halfHeight) - r2.yAnchorOffset)\n    }\n\n    // Figure out the combined half-widths and half-heights\n    combinedHalfWidths = Math.abs(r1.halfWidth) + Math.abs(r2.halfWidth)\n    combinedHalfHeights = Math.abs(r1.halfHeight) + Math.abs(r2.halfHeight)\n\n    // Check for a collision on the x axis\n    if (Math.abs(vx) < combinedHalfWidths) {\n      // A collision might be occuring. Check for a collision on the y axis\n      if (Math.abs(vy) < combinedHalfHeights) {\n        // There's definitely a collision happening\n        hit = true\n      } else {\n        // There's no collision on the y axis\n        hit = false\n      }\n    } else {\n      // There's no collision on the x axis\n      hit = false\n    }\n\n    // `hit` will be either `true` or `false`\n    return hit\n  }\n\n  /*\n  hitTestCircleRectangle\n  ----------------\n\n  Use it to find out if a circular shape is touching a rectangular shape\n  Parameters:\n  a. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n  b. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n\n  */\n\n  hitTestCircleRectangle (c1, r1, global = false) {\n    // Add collision properties\n    if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1)\n    if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1)\n\n    let region, collision, c1x, c1y, r1x, r1y\n\n    // Use either global or local coordinates\n    if (global) {\n      c1x = c1.gx\n      c1y = c1.gy\n      r1x = r1.gx\n      r1y = r1.gy\n    } else {\n      c1x = c1.x\n      c1y = c1.y\n      r1x = r1.x\n      r1y = r1.y\n    }\n\n    // Is the circle above the rectangle's top edge?\n    if (c1y - c1.yAnchorOffset < r1y - Math.abs(r1.halfHeight) -\n      r1.yAnchorOffset) {\n      // If it is, we need to check whether it's in the\n      // top left, top center or top right\n      if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'topLeft'\n      } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'topRight'\n      } else {\n        region = 'topMiddle'\n      }\n    }\n\n    // The circle isn't above the top edge, so it might be\n    // below the bottom edge\n    else if (c1y - c1.yAnchorOffset > r1y + Math.abs(r1.halfHeight) -\n      r1.yAnchorOffset) {\n      // If it is, we need to check whether it's in the bottom left,\n      // bottom center, or bottom right\n      if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'bottomLeft'\n      } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'bottomRight'\n      } else {\n        region = 'bottomMiddle'\n      }\n    }\n\n    // The circle isn't above the top edge or below the bottom edge,\n    // so it must be on the left or right side\n    else {\n      if (c1x - c1.xAnchorOffset < r1x - Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'leftMiddle'\n      } else {\n        region = 'rightMiddle'\n      }\n    }\n\n    // Is this the circle touching the flat sides\n    // of the rectangle?\n    if (region === 'topMiddle' || region === 'bottomMiddle' || region ===\n      'leftMiddle' || region === 'rightMiddle') {\n      // Yes, it is, so do a standard rectangle vs. rectangle collision test\n      collision = this.hitTestRectangle(c1, r1, global)\n    }\n\n    // The circle is touching one of the corners, so do a\n    // circle vs. point collision test\n    else {\n      const point = {}\n\n      switch (region) {\n        case 'topLeft':\n          point.x = r1x - r1.xAnchorOffset\n          point.y = r1y - r1.yAnchorOffset\n          break\n\n        case 'topRight':\n          point.x = r1x + r1.width - r1.xAnchorOffset\n          point.y = r1y - r1.yAnchorOffset\n          break\n\n        case 'bottomLeft':\n          point.x = r1x - r1.xAnchorOffset\n          point.y = r1y + r1.height - r1.yAnchorOffset\n          break\n\n        case 'bottomRight':\n          point.x = r1x + r1.width - r1.xAnchorOffset\n          point.y = r1y + r1.height - r1.yAnchorOffset\n          break\n\n        default:\n          break\n      }\n\n      // Check for a collision between the circle and the point\n      collision = this.hitTestCirclePoint(c1, point, global)\n    }\n\n    // Return the result of the collision.\n    // The return value will be `undefined` if there's no collision\n    if (collision) {\n      return region\n    } else {\n      return collision\n    }\n  }\n\n  /*\n  hitTestCirclePoint\n  ------------------\n\n  Use it to find out if a circular shape is touching a point\n  Parameters:\n  a. A sprite object with `centerX`, `centerY`, and `radius` properties.\n  b. A point object with `x` and `y` properties.\n\n  */\n\n  hitTestCirclePoint (c1, point, global = false) {\n    // Add collision properties\n    if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1)\n\n    // A point is just a circle with a diameter of\n    // 1 pixel, so we can cheat. All we need to do is an ordinary circle vs. circle\n    // Collision test. Just supply the point with the properties\n    // it needs\n    point.diameter = 1\n    point.width = point.diameter\n    point.radius = 0.5\n    point.centerX = point.x\n    point.centerY = point.y\n    point.gx = point.x\n    point.gy = point.y\n    point.xAnchorOffset = 0\n    point.yAnchorOffset = 0\n    point._bumpPropertiesAdded = true\n    return this.hitTestCircle(c1, point, global)\n  }\n\n  /*\n  circleRectangleCollision\n  ------------------------\n\n  Use it to bounce a circular shape off a rectangular shape\n  Parameters:\n  a. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n  b. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n\n  */\n\n  circleRectangleCollision (\n    c1, r1, bounce = false, global = false,\n  ) {\n    // Add collision properties\n    if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1)\n    if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1)\n\n    let region, collision, c1x, c1y, r1x, r1y\n\n    // Use either the global or local coordinates\n    if (global) {\n      c1x = c1.gx\n      c1y = c1.gy\n      r1x = r1.gx\n      r1y = r1.gy\n    } else {\n      c1x = c1.x\n      c1y = c1.y\n      r1x = r1.x\n      r1y = r1.y\n    }\n\n    // Is the circle above the rectangle's top edge?\n    if (c1y - c1.yAnchorOffset < r1y - Math.abs(r1.halfHeight) -\n      r1.yAnchorOffset) {\n      // If it is, we need to check whether it's in the\n      // top left, top center or top right\n      if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'topLeft'\n      } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'topRight'\n      } else {\n        region = 'topMiddle'\n      }\n    }\n\n    // The circle isn't above the top edge, so it might be\n    // below the bottom edge\n    else if (c1y - c1.yAnchorOffset > r1y + Math.abs(r1.halfHeight) -\n      r1.yAnchorOffset) {\n      // If it is, we need to check whether it's in the bottom left,\n      // bottom center, or bottom right\n      if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'bottomLeft'\n      } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'bottomRight'\n      } else {\n        region = 'bottomMiddle'\n      }\n    }\n\n    // The circle isn't above the top edge or below the bottom edge,\n    // so it must be on the left or right side\n    else {\n      if (c1x - c1.xAnchorOffset < r1x - Math.abs(r1.halfWidth) -\n        r1.xAnchorOffset) {\n        region = 'leftMiddle'\n      } else {\n        region = 'rightMiddle'\n      }\n    }\n\n    // Is this the circle touching the flat sides\n    // of the rectangle?\n    if (region === 'topMiddle' || region === 'bottomMiddle' || region ===\n      'leftMiddle' || region === 'rightMiddle') {\n      // Yes, it is, so do a standard rectangle vs. rectangle collision test\n      collision = this.rectangleCollision(c1, r1, bounce, global)\n    }\n\n    // The circle is touching one of the corners, so do a\n    // circle vs. point collision test\n    else {\n      const point = {}\n\n      switch (region) {\n        case 'topLeft':\n          point.x = r1x - r1.xAnchorOffset\n          point.y = r1y - r1.yAnchorOffset\n          break\n\n        case 'topRight':\n          point.x = r1x + r1.width - r1.xAnchorOffset\n          point.y = r1y - r1.yAnchorOffset\n          break\n\n        case 'bottomLeft':\n          point.x = r1x - r1.xAnchorOffset\n          point.y = r1y + r1.height - r1.yAnchorOffset\n          break\n\n        case 'bottomRight':\n          point.x = r1x + r1.width - r1.xAnchorOffset\n          point.y = r1y + r1.height - r1.yAnchorOffset\n      }\n\n      // Check for a collision between the circle and the point\n      collision = this.circlePointCollision(c1, point, bounce, global)\n    }\n\n    if (collision) {\n      return region\n    } else {\n      return collision\n    }\n  }\n\n  /*\n  circlePointCollision\n  --------------------\n\n  Use it to boucnce a circle off a point.\n  Parameters:\n  a. A sprite object with `centerX`, `centerY`, and `radius` properties.\n  b. A point object with `x` and `y` properties.\n\n  */\n\n  circlePointCollision (c1, point, bounce = false, global = false) {\n    // Add collision properties\n    if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1)\n\n    // A point is just a circle with a diameter of\n    // 1 pixel, so we can cheat. All we need to do is an ordinary circle vs. circle\n    // Collision test. Just supply the point with the properties\n    // it needs\n    point.diameter = 1\n    point.width = point.diameter\n    point.radius = 0.5\n    point.centerX = point.x\n    point.centerY = point.y\n    point.gx = point.x\n    point.gy = point.y\n    point.xAnchorOffset = 0\n    point.yAnchorOffset = 0\n    point._bumpPropertiesAdded = true\n    return this.circleCollision(c1, point, bounce, global)\n  }\n\n  /*\n  bounceOffSurface\n  ----------------\n\n  Use this to bounce an object off another object.\n  Parameters:\n  a. An object with `v.x` and `v.y` properties. This represents the object that is colliding\n  with a surface.\n  b. An object with `x` and `y` properties. This represents the surface that the object\n  is colliding into.\n  The first object can optionally have a mass property that's greater than 1. The mass will\n  be used to dampen the bounce effect.\n  */\n\n  bounceOffSurface (o, s) {\n    // Add collision properties\n    if (!o._bumpPropertiesAdded) this.addCollisionProperties(o)\n\n    let dp1\n    let dp2\n    const p1 = {}\n    const p2 = {}\n    const bounce = {}\n    const mass = o.mass || 1\n\n    // 1. Calculate the collision surface's properties\n    // Find the surface vector's left normal\n    s.lx = s.y\n    s.ly = -s.x\n\n    // Find its magnitude\n    s.magnitude = Math.sqrt(s.x * s.x + s.y * s.y)\n\n    // Find its normalized values\n    s.dx = s.x / s.magnitude\n    s.dy = s.y / s.magnitude\n\n    // 2. Bounce the object (o) off the surface (s)\n\n    // Find the dot product between the object and the surface\n    dp1 = o.vx * s.dx + o.vy * s.dy\n\n    // Project the object's velocity onto the collision surface\n    p1.vx = dp1 * s.dx\n    p1.vy = dp1 * s.dy\n\n    // Find the dot product of the object and the surface's left normal (s.lx and s.ly)\n    dp2 = o.vx * (s.lx / s.magnitude) + o.vy * (s.ly / s.magnitude)\n\n    // Project the object's velocity onto the surface's left normal\n    p2.vx = dp2 * (s.lx / s.magnitude)\n    p2.vy = dp2 * (s.ly / s.magnitude)\n\n    // Reverse the projection on the surface's left normal\n    p2.vx *= -1\n    p2.vy *= -1\n\n    // Add up the projections to create a new bounce vector\n    bounce.x = p1.vx + p2.vx\n    bounce.y = p1.vy + p2.vy\n\n    // Assign the bounce vector to the object's velocity\n    // with optional mass to dampen the effect\n    o.vx = bounce.x / mass\n    o.vy = bounce.y / mass\n  }\n\n  /*\n  contain\n  -------\n  `contain` can be used to contain a sprite with `x` and\n  `y` properties inside a rectangular area.\n\n  The `contain` function takes four arguments: a sprite with `x` and `y`\n  properties, an object literal with `x`, `y`, `width` and `height` properties. The\n  third argument is a Boolean (true/false) value that determines if the sprite\n  should bounce when it hits the edge of the container. The fourth argument\n  is an extra user-defined callback function that you can call when the\n  sprite hits the container\n  ```js\n  contain(anySprite, {x: 0, y: 0, width: 512, height: 512}, true, callbackFunction);\n  ```\n  The code above will contain the sprite's position inside the 512 by\n  512 pixel area defined by the object. If the sprite hits the edges of\n  the container, it will bounce. The `callBackFunction` will run if\n  there's a collision.\n\n  An additional feature of the `contain` method is that if the sprite\n  has a `mass` property, it will be used to dampen the sprite's bounce\n  in a natural looking way.\n\n  If the sprite bumps into any of the containing object's boundaries,\n  the `contain` function will return a value that tells you which side\n  the sprite bumped into: “left”, “top”, “right” or “bottom”. Here's how\n  you could keep the sprite contained and also find out which boundary\n  it hit:\n  ```js\n  //Contain the sprite and find the collision value\n  let collision = contain(anySprite, {x: 0, y: 0, width: 512, height: 512});\n\n  //If there's a collision, display the boundary that the collision happened on\n  if(collision) {\n    if collision.has(\"left\") console.log(\"The sprite hit the left\");\n    if collision.has(\"top\") console.log(\"The sprite hit the top\");\n    if collision.has(\"right\") console.log(\"The sprite hit the right\");\n    if collision.has(\"bottom\") console.log(\"The sprite hit the bottom\");\n  }\n  ```\n  If the sprite doesn't hit a boundary, the value of\n  `collision` will be `undefined`.\n  */\n\n  /*\n  contain(sprite, container, bounce = false, extra = undefined) {\n\n    //Helper methods that compensate for any possible shift the the\n    //sprites' anchor points\n    let nudgeAnchor = (o, value, axis) => {\n      if (o.anchor !== undefined) {\n        if (o.anchor[axis] !== 0) {\n          return value * ((1 - o.anchor[axis]) - o.anchor[axis]);\n        } else {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    };\n\n    let compensateForAnchor = (o, value, axis) => {\n      if (o.anchor !== undefined) {\n        if (o.anchor[axis] !== 0) {\n          return value * o.anchor[axis];\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    };\n\n    let compensateForAnchors = (a, b, property1, property2) => {\n       return compensateForAnchor(a, a[property1], property2) + compensateForAnchor(b, b[property1], property2)\n    };\n    //Create a set called `collision` to keep track of the\n    //boundaries with which the sprite is colliding\n    let collision = new Set();\n\n    //Left\n    if (sprite.x - compensateForAnchor(sprite, sprite.width, \"x\") < container.x - sprite.parent.gx - compensateForAnchor(container, container.width, \"x\")) {\n      //Bounce the sprite if `bounce` is true\n      if (bounce) sprite.vx *= -1;\n\n      //If the sprite has `mass`, let the mass\n      //affect the sprite's velocity\n      if(sprite.mass) sprite.vx /= sprite.mass;\n\n      //Keep the sprite inside the container\n      sprite.x = container.x - sprite.parent.gx + compensateForAnchor(sprite, sprite.width, \"x\") - compensateForAnchor(container, container.width, \"x\");\n\n      //Add \"left\" to the collision set\n      collision.add(\"left\");\n    }\n\n    //Top\n    if (sprite.y - compensateForAnchor(sprite, sprite.height, \"y\") < container.y - sprite.parent.gy - compensateForAnchor(container, container.height, \"y\")) {\n      if (bounce) sprite.vy *= -1;\n      if(sprite.mass) sprite.vy /= sprite.mass;\n      sprite.y = container.x - sprite.parent.gy + compensateForAnchor(sprite, sprite.height, \"y\") - compensateForAnchor(container, container.height, \"y\");\n      collision.add(\"top\");\n    }\n\n    //Right\n    if (sprite.x - compensateForAnchor(sprite, sprite.width, \"x\") + sprite.width > container.width - compensateForAnchor(container, container.width, \"x\")) {\n      if (bounce) sprite.vx *= -1;\n      if(sprite.mass) sprite.vx /= sprite.mass;\n      sprite.x = container.width - sprite.width + compensateForAnchor(sprite, sprite.width, \"x\") - compensateForAnchor(container, container.width, \"x\");\n      collision.add(\"right\");\n    }\n\n    //Bottom\n    if (sprite.y - compensateForAnchor(sprite, sprite.height, \"y\") + sprite.height > container.height - compensateForAnchor(container, container.height, \"y\")) {\n      if (bounce) sprite.vy *= -1;\n      if(sprite.mass) sprite.vy /= sprite.mass;\n      sprite.y = container.height - sprite.height + compensateForAnchor(sprite, sprite.height, \"y\") - compensateForAnchor(container, container.height, \"y\");\n      collision.add(\"bottom\");\n    }\n\n    //If there were no collisions, set `collision` to `undefined`\n    if (collision.size === 0) collision = undefined;\n\n    //The `extra` function runs if there was a collision\n    //and `extra` has been defined\n    if (collision && extra) extra(collision);\n\n    //Return the `collision` value\n    return collision;\n  }\n  */\n  contain (sprite, container, bounce = false, extra = undefined) {\n    // Add collision properties\n    if (!sprite._bumpPropertiesAdded) this.addCollisionProperties(sprite)\n\n    // Give the container x and y anchor offset values, if it doesn't\n    // have any\n    if (container.xAnchorOffset === undefined) container.xAnchorOffset = 0\n    if (container.yAnchorOffset === undefined) container.yAnchorOffset = 0\n    if (sprite.parent.gx === undefined) sprite.parent.gx = 0\n    if (sprite.parent.gy === undefined) sprite.parent.gy = 0\n\n    // Create a Set called `collision` to keep track of the\n    // boundaries with which the sprite is colliding\n    let collision = new Set()\n\n    // Left\n    if (sprite.x - sprite.xAnchorOffset < container.x - sprite.parent.gx -\n      container.xAnchorOffset) {\n      // Bounce the sprite if `bounce` is true\n      if (bounce) sprite.vx *= -1\n\n      // If the sprite has `mass`, let the mass\n      // affect the sprite's velocity\n      if (sprite.mass) sprite.vx /= sprite.mass\n\n      // Reposition the sprite inside the container\n      sprite.x = container.x - sprite.parent.gx - container.xAnchorOffset +\n        sprite.xAnchorOffset\n\n      // Make a record of the side which the container hit\n      collision.add('left')\n    }\n\n    // Top\n    if (sprite.y - sprite.yAnchorOffset < container.y - sprite.parent.gy -\n      container.yAnchorOffset) {\n      if (bounce) sprite.vy *= -1\n      if (sprite.mass) sprite.vy /= sprite.mass\n      sprite.y = container.y - sprite.parent.gy - container.yAnchorOffset +\n        sprite.yAnchorOffset\n      collision.add('top')\n    }\n\n    // Right\n    if (sprite.x - sprite.xAnchorOffset + sprite.width > container.width -\n      container.xAnchorOffset) {\n      if (bounce) sprite.vx *= -1\n      if (sprite.mass) sprite.vx /= sprite.mass\n      sprite.x = container.width - sprite.width - container.xAnchorOffset +\n        sprite.xAnchorOffset\n      collision.add('right')\n    }\n\n    // Bottom\n    if (sprite.y - sprite.yAnchorOffset + sprite.height > container.height -\n      container.yAnchorOffset) {\n      if (bounce) sprite.vy *= -1\n      if (sprite.mass) sprite.vy /= sprite.mass\n      sprite.y = container.height - sprite.height - container.yAnchorOffset +\n        sprite.yAnchorOffset\n      collision.add('bottom')\n    }\n\n    // If there were no collisions, set `collision` to `undefined`\n    if (collision.size === 0) collision = undefined\n\n    // The `extra` function runs if there was a collision\n    // and `extra` has been defined\n    if (collision && extra) extra(collision)\n\n    // Return the `collision` value\n    return collision\n  }\n\n  // `outsideBounds` checks whether a sprite is outide the boundary of\n  // another object. It returns an object called `collision`. `collision` will be `undefined` if there's no\n  // collision. But if there is a collision, `collision` will be\n  // returned as a Set containg strings that tell you which boundary\n  // side was crossed: \"left\", \"right\", \"top\" or \"bottom\"\n  outsideBounds (s, bounds, extra) {\n    const x = bounds.x\n    const y = bounds.y\n    const width = bounds.width\n    const height = bounds.height\n\n    // The `collision` object is used to store which\n    // side of the containing rectangle the sprite hits\n    let collision = new Set()\n\n    // Left\n    if (s.x < x - s.width) {\n      collision.add('left')\n    }\n    // Top\n    if (s.y < y - s.height) {\n      collision.add('top')\n    }\n    // Right\n    if (s.x > width + s.width) {\n      collision.add('right')\n    }\n    // Bottom\n    if (s.y > height + s.height) {\n      collision.add('bottom')\n    }\n\n    // If there were no collisions, set `collision` to `undefined`\n    if (collision.size === 0) collision = undefined\n\n    // The `extra` function runs if there was a collision\n    // and `extra` has been defined\n    if (collision && extra) extra(collision)\n\n    // Return the `collision` object\n    return collision\n  }\n\n  /*\n  _getCenter\n  ----------\n\n  A utility that finds the center point of the sprite. If it's anchor point is the\n  sprite's top left corner, then the center is calculated from that point.\n  If the anchor point has been shifted, then the anchor x/y point is used as the sprite's center\n  */\n\n  _getCenter (o, dimension, axis) {\n    if (o.anchor !== undefined) {\n      if (o.anchor[axis] !== 0) {\n        return 0\n      } else {\n        // console.log(o.anchor[axis])\n        return dimension / 2\n      }\n    } else {\n      return dimension\n    }\n  }\n\n  /*\n  hit\n  ---\n  A convenient universal collision function to test for collisions\n  between rectangles, circles, and points.\n  */\n\n  hit (a, b, react = false, bounce = false, global, extra = undefined) {\n    // Local references to bump's collision methods\n    const hitTestPoint = this.hitTestPoint.bind(this)\n    const hitTestRectangle = this.hitTestRectangle.bind(this)\n    const hitTestCircle = this.hitTestCircle.bind(this)\n    const movingCircleCollision = this.movingCircleCollision.bind(this)\n    const circleCollision = this.circleCollision.bind(this)\n    const hitTestCircleRectangle = this.hitTestCircleRectangle.bind(this)\n    const rectangleCollision = this.rectangleCollision.bind(this)\n    const circleRectangleCollision = this.circleRectangleCollision.bind(this)\n\n    let collision\n    const aIsASprite = a.parent !== undefined\n    const bIsASprite = b.parent !== undefined\n\n    // Check to make sure one of the arguments isn't an array\n    if (aIsASprite && b instanceof Array || bIsASprite && a instanceof Array) {\n      // If it is, check for a collision between a sprite and an array\n      spriteVsArray()\n    } else {\n      // If one of the arguments isn't an array, find out what type of\n      // collision check to run\n      collision = findCollisionType(a, b)\n      if (collision && extra) extra(collision)\n    }\n\n    // Return the result of the collision.\n    // It will be `undefined` if there's no collision and `true` if\n    // there is a collision. `rectangleCollision` sets `collsision` to\n    // \"top\", \"bottom\", \"left\" or \"right\" depeneding on which side the\n    // collision is occuring on\n    return collision\n\n    function findCollisionType (a, b) {\n      // Are `a` and `b` both sprites?\n      // (We have to check again if this function was called from\n      // `spriteVsArray`)\n      const aIsASprite = a.parent !== undefined\n      const bIsASprite = b.parent !== undefined\n\n      if (aIsASprite && bIsASprite) {\n        // Yes, but what kind of sprites?\n        if (a.diameter && b.diameter) {\n          // They're circles\n          return circleVsCircle(a, b)\n        } else if (a.diameter && !b.diameter) {\n          // The first one is a circle and the second is a rectangle\n          return circleVsRectangle(a, b)\n        } else {\n          // They're rectangles\n          return rectangleVsRectangle(a, b)\n        }\n      }\n      // They're not both sprites, so what are they?\n      // Is `a` not a sprite and does it have x and y properties?\n      else if (bIsASprite && !(a.x === undefined) && !(a.y === undefined)) {\n        // Yes, so this is a point vs. sprite collision test\n        return hitTestPoint(a, b)\n      } else {\n        // The user is trying to test some incompatible objects\n        throw new Error(\n          `I'm sorry, ${a} and ${b} cannot be use together in a collision test.'`)\n      }\n    }\n\n    function spriteVsArray () {\n      // If `a` happens to be the array, flip it around so that it becomes `b`\n      if (a instanceof Array) {\n        const [a, b] = [b, a]\n      }\n      // Loop through the array in reverse\n      for (let i = b.length - 1; i >= 0; i--) {\n        const sprite = b[i]\n        collision = findCollisionType(a, sprite)\n        if (collision && extra) extra(collision, sprite)\n      }\n    }\n\n    function circleVsCircle (a, b) {\n      // If the circles shouldn't react to the collision,\n      // just test to see if they're touching\n      if (!react) {\n        return hitTestCircle(a, b)\n      }\n      // Yes, the circles should react to the collision\n      else {\n        // Are they both moving?\n        if (a.vx + a.vy !== 0 && b.vx + b.vy !== 0) {\n          // Yes, they are both moving\n          // (moving circle collisions always bounce apart so there's\n          // no need for the third, `bounce`, argument)\n          return movingCircleCollision(a, b, global)\n        } else {\n          // No, they're not both moving\n          return circleCollision(a, b, bounce, global)\n        }\n      }\n    }\n\n    function rectangleVsRectangle (a, b) {\n      // If the rectangles shouldn't react to the collision, just\n      // test to see if they're touching\n      if (!react) {\n        return hitTestRectangle(a, b, global)\n      } else {\n        return rectangleCollision(a, b, bounce, global)\n      }\n    }\n\n    function circleVsRectangle (a, b) {\n      // If the rectangles shouldn't react to the collision, just\n      // test to see if they're touching\n      if (!react) {\n        return hitTestCircleRectangle(a, b, global)\n      } else {\n        return circleRectangleCollision(a, b, bounce, global)\n      }\n    }\n  }\n}\n","// eslint-disable-next-line no-unused-vars\nimport React, { useEffect, useState } from 'react'\nimport * as PIXI from 'pixi.js'\nimport {\n  keyboard\n} from './utils'\nimport Bump from './bump'\n\nfunction GamePine (props) {\n  const [initSetting] = useState({\n\n    backwoodsColor: '0x061639',\n    width: 1286,\n    height: 640\n  })\n  const [xiaoxin] = useState({\n    name: '小新',\n    run_images: [\n      'images/xiaoxin_go_0001.png',\n      'images/xiaoxin_go_0002.png',\n      'images/xiaoxin_go_0003.png',\n      'images/xiaoxin_go_0004.png',\n      'images/xiaoxin_go_0005.png',\n      'images/xiaoxin_go_0006.png'],\n    animationSpeed: 0.1,\n    y: 484,\n    x: 50,\n    // 左移需要的属性\n    leftSet: {\n      scale: {\n        x: -1,\n        y: 1\n      },\n      pivot: {\n        x: 83,\n        y: 0\n      }\n    },\n    rightSet: {\n      scale: {\n        x: 1,\n        y: 1\n      },\n      pivot: {\n        x: 0,\n        y: 0\n      }\n    }\n  })\n  const [backgroundsJson] = useState([\n    {\n      img_url: 'images/ground2.png',\n      width: 1286,\n      height: 66,\n      vx: 3\n    },\n    {\n      img_url: 'images/background.png',\n      width: 1286,\n      height: 640,\n      vx: 1.5\n    }\n  ])\n  const [bulidsJson] = useState([\n    {\n      id: 1,\n      date: 1999,\n      title: '万圣节凌晨！小鬼降世！',\n      detail: '告别牛头马面，礼让黑白无常，独自悠哉在奈何桥边，一碗孟婆汤，一盏南瓜灯，天时，地利，人和，踏进重生之门，独闯万圣月夜。雨夜潮暗，风鸣电闪，凌晨钟声，小鬼降世人间。毛孩骇人，名曰一恒，父母慈爱，潜心抚安，欲知后事，待君且看……',\n      img_url: 'images/hospital.png',\n      scale: 0.7,\n      x: 200,\n      y: 284\n    },\n    {\n      id: 2,\n      date: 2014,\n      title: '中学：只想做一个安静的美男子！',\n      detail: '在中学，性格较为腼腆，长得比较帅😁，深受大众喜爱',\n      img_url: 'images/middle-school.png',\n      scale: 1.2,\n      x: 800,\n      y: 199\n    },\n    {\n      id: 3,\n      date: 2017,\n      title: '进入大学',\n      detail: '终于告别了苦逼的高中生活，超级兴奋\\n第一次考试不及格，开学以来第一次期中考试，数学分析，只考了52，😭，不过还好期末考试考得好',\n      img_url: 'images/c.png',\n      scale: 2,\n      x: 1900,\n      y: 464\n    },\n    {\n      id: 4,\n      date: 2018,\n      title: '大一的时候',\n      detail: '上学期由于各种贪玩，成绩不是很好，还好下学期奋发图强，靠综测勉强够到奖学金',\n      img_url: 'images/university.png',\n      scale: 0.3,\n      x: 2200,\n      y: 314\n    },\n    {\n      id: 5,\n      date: 2018,\n      title: '科创部部长',\n      detail: '有幸得到赏识，被提拔为学院科创部部长。任职期间，几乎什么也没干。。。受制于想象力，太菜了，太菜了',\n      img_url: 'images/groupLeader.png',\n      scale: 0.5,\n      x: 4400,\n      y: 384\n    },\n    {\n      id: 6,\n      date: 2018,\n      title: '大二的逆袭之路',\n      detail: '本来要放弃保研的我，经过学姐的淳淳教导后，终于燃起保研的信心，努力学习，奋发图强，虽然最后仍旧没能保研😂',\n      img_url: 'images/inLove.png',\n      scale: 0.4,\n      x: 2700,\n      y: 369\n    },\n    {\n      id: 7,\n      date: 2019,\n      title: '自负',\n      detail: '在大二取得了好成绩的我，在大三，稍微有点自负，上课玩游戏，下课玩游戏，最后成绩降到了第10，保研无望😭，好后悔！！',\n      img_url: 'images/joinGroup.png',\n      scale: 1,\n      x: 3200,\n      y: 362\n    },\n    {\n      id: 8,\n      date: 2019,\n      title: '初尝代码的趣味',\n      detail: '在这时已经做过了一些课程设计，发现码代码贼有意思，真的是code一时爽，一直code一直爽',\n      img_url: 'images/definedGoal.png',\n      scale: 1,\n      x: 3850,\n      y: 304\n    },\n\n    {\n      id: 9,\n      date: 2020,\n      title: '劳资要考研！',\n      detail: '真的是他行我也行，看到学长大部分都能考到好学校，真的心动了，下定决心考ZJU，就头铁一回！',\n      img_url: 'images/production_hujiaxing.png',\n      scale: 0.3,\n      x: 5000,\n      y: 489\n    },\n\n    {\n      id: 10,\n      date: 2021,\n      title: '未来可期',\n      detail: '在ZJU的校园里，漫步，希望再找个女朋友，Beautiful，好吧，女朋友可能是我想🍑。',\n      img_url: 'images/succeed.png',\n      scale: 0.5,\n      x: 6780,\n      y: 174\n    }\n  ])\n\n  // 引入核心PIXI模块\n  const Application = PIXI.Application\n  const loader = PIXI.Loader.shared\n  const resources = PIXI.Loader.shared.resources\n  const Sprite = PIXI.Sprite\n  const TilingSprite = PIXI.TilingSprite\n  const Container = PIXI.Container\n  const TextStyle = PIXI.TextStyle\n  const Graphics = PIXI.Graphics\n  const Text = PIXI.Text\n  const AnimatedSprite = PIXI.AnimatedSprite\n  const Texture = PIXI.Texture\n  const Ticker = PIXI.Ticker\n\n  // 当前碰撞建筑\n  let currHitBuild = 'none'\n  let ground\n  let woods// 背景\n  let builds// 建筑群\n\n  // 初始化\n  useEffect(() => {\n    const app = new Application(initSetting)\n    document.getElementById('gamePine').appendChild(app.view)\n    console.log('props', props)\n    // 将canvas和容器尺寸匹配\n    document.querySelector(\n      '#gamePine canvas').style = `zoom:${0.5}`\n\n    const bump = new Bump(PIXI)// 碰撞对象\n\n    // 添加进度加载表示\n    const progressPine = new Container()\n    progressPine.zIndex = 1000\n    const grogressPineBackground = new Graphics()\n    grogressPineBackground.beginFill(0x000000)\n    grogressPineBackground.drawRect(0, 0, initSetting.width,\n      initSetting.height)\n    grogressPineBackground.endFill()\n    progressPine.addChild(grogressPineBackground)\n\n    const progressStyle = new TextStyle({\n      fontFamily: 'Arial',\n      fontSize: 36,\n      fill: 'white',\n      stroke: '#ff3300',\n      strokeThickness: 4,\n      dropShadow: true,\n      dropShadowColor: '#000000',\n      dropShadowBlur: 4,\n      dropShadowAngle: Math.PI / 6,\n      dropShadowDistance: 6\n    })\n\n    // 进度条\n    const progressMessage = new Text('0%', progressStyle)\n    progressMessage.y = initSetting.height / 2\n    progressMessage.x = initSetting.width / 2\n    progressMessage.anchor.set(0.5)\n\n    progressPine.addChild(progressMessage)\n\n    // 设置可排序\n    app.stage.sortableChildren = true\n    app.stage.addChild(progressPine)\n\n    // 创建一个文字描述的面板\n    const detailsPine = new Container()\n    detailsPine.zIndex = 1001\n    detailsPine.x = 30\n\n    // details列表\n    const yearsStyle = new TextStyle({\n      dropShadow: true,\n      dropShadowAlpha: 0.9,\n      dropShadowBlur: 3,\n      dropShadowColor: '#aeaeae',\n      fontFamily: '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      fontSize: 80\n    })\n    // 时间\n    const yearsText = new Text('🎮', yearsStyle)\n    detailsPine.addChild(yearsText)\n\n    const titleStyle = new TextStyle({\n      dropShadow: true,\n      dropShadowAlpha: 0.9,\n      dropShadowBlur: 3,\n      dropShadowColor: '#aeaeae',\n      fontFamily: '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      fontSize: 55\n    })\n    const titleText = new Text('游戏说明', titleStyle)\n    titleText.x = 310\n    titleText.y = 10\n\n    detailsPine.addChild(titleText)\n\n    const detailsStyle = new TextStyle({\n      dropShadow: true,\n      dropShadowAlpha: 0.9,\n      dropShadowBlur: 3,\n      dropShadowColor: '#aeaeae',\n      fontFamily: '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      fontSize: 27,\n      wordWrap: true,\n      wordWrapWidth: 900,\n      breakWords: true\n    })\n    // PIXI不支持首行缩进，前空格也会被清除，这里用两个空字符替代\n    const detailsText = new Text('通过键盘左右键控制蜡笔小新移动，按压代表行动，松开即可暂停，来瞧瞧我的人生轨迹。',\n      detailsStyle)\n    detailsText.x = 310\n    detailsText.y = 80\n    detailsPine.addChild(detailsText)\n\n    const textElements = {\n      yearsText,\n      detailsText,\n      titleText,\n      detailsPine\n    }\n\n    app.stage.addChild(detailsPine)\n\n    // 资源列表\n    const resourcesUrl = []\n    bulidsJson.forEach(element => {\n      // 将所有的图片资源添加到resourcesUrl数组中\n      resourcesUrl.push(element.img_url)\n    })\n    backgroundsJson.forEach(element => {\n      resourcesUrl.push(element.img_url)\n    })\n\n    // 图片路径在public文件夹中 参阅：https://www.jianshu.com/p/49e8dac4a5af\n    // 开始加载所有资源\n    resourcesUrl.forEach(element => {\n      loader.add(element)\n    })\n\n    loader.on('progress', loadProgressHandler)\n      .load(setup)\n\n    // 进度条\n    function loadProgressHandler (loader, resource) {\n      const currProgressNumber = loader.progress.toFixed(2)\n      // 更新进度条\n      progressMessage.text = currProgressNumber + '%'\n      if (currProgressNumber >= 100) {\n        setTimeout(() => {\n          progressPine.visible = false\n        }, 500)\n      }\n    }\n\n    // 小新的纹理数组\n    const textureArrayRight = []\n    for (let i = 0; i < 6; i++) {\n      const texture = Texture.from(xiaoxin.run_images[i])\n      textureArrayRight.push(texture)\n    }\n    const animatedSpriteXiaoxin = new AnimatedSprite(textureArrayRight)\n    animatedSpriteXiaoxin.animationSpeed = 0.1\n    animatedSpriteXiaoxin.y = 484\n    animatedSpriteXiaoxin.x = 50\n\n    // 游戏执行\n    function setup () {\n      // 将建筑添加到建筑群组中\n      builds = new Container()\n      bulidsJson.forEach(element => {\n        const currBuildSprite = new Sprite(resources[element.img_url].texture)\n        currBuildSprite.scale.x = element.scale\n        currBuildSprite.scale.y = element.scale\n        currBuildSprite.x = element.x\n        currBuildSprite.y = element.y\n        builds.addChild(currBuildSprite)\n      })\n      const groundJson = backgroundsJson[0]\n      ground = new TilingSprite(resources[groundJson.img_url].texture,\n        groundJson.width, groundJson.height)\n      const woodsJson = backgroundsJson[1]\n      woods = new TilingSprite(resources[woodsJson.img_url].texture,\n        woodsJson.width, woodsJson.height)\n      ground.y = woodsJson.height - groundJson.height\n\n      const ticker = Ticker.shared\n\n      // 右键按压\n      const keyRight = keyboard(39)\n      keyRight.press = () => {\n        // 背景左移\n\n        // 右键动画\n        ticker.add(handleKeyPressRight)\n\n        // 碰撞检测\n        ticker.add(returnHitTestTicker)\n\n        // 小新向右跑的动画\n        animatedSpriteXiaoxin.scale = xiaoxin.rightSet.scale\n        animatedSpriteXiaoxin.pivot = xiaoxin.rightSet.pivot\n        animatedSpriteXiaoxin.play()\n      }\n\n      // 右键释放\n      keyRight.release = () => {\n        ticker.remove(handleKeyPressRight)\n        ticker.remove(returnHitTestTicker)\n        animatedSpriteXiaoxin.stop()\n      }\n\n      // 左键按压\n      const keyLeft = keyboard(37)\n      keyLeft.press = () => {\n        // ticker = app.ticker;\n        ticker.add(handleKeyPressLeft)\n        ticker.add(returnHitTestTicker)\n\n        animatedSpriteXiaoxin.scale = xiaoxin.leftSet.scale\n        animatedSpriteXiaoxin.pivot = xiaoxin.leftSet.pivot\n        animatedSpriteXiaoxin.play()\n      }\n\n      // 左键释放\n      keyLeft.release = () => {\n        ticker.remove(handleKeyPressLeft)\n        ticker.remove(returnHitTestTicker)\n        animatedSpriteXiaoxin.stop()\n      }\n\n      app.stage.addChild(woods, builds, ground, animatedSpriteXiaoxin)\n    }\n\n    function returnHitTestTicker (delta) {\n      hitTestTicker(delta, bump, animatedSpriteXiaoxin, builds, textElements)\n    }\n  }, [])\n\n  // 右键控制\n  function handleKeyPressRight (delta) {\n    ground.tilePosition.x -= backgroundsJson[0].vx\n    woods.tilePosition.x -= backgroundsJson[1].vx\n\n    builds.x -= backgroundsJson[0].vx\n  }\n\n  // 左键控制\n  function handleKeyPressLeft (delta) {\n    ground.tilePosition.x += backgroundsJson[0].vx\n    woods.tilePosition.x += backgroundsJson[1].vx\n\n    builds.x += backgroundsJson[0].vx\n  }\n\n  function hitTestTicker (delta, Bump, sprite, sprites, textElements) {\n    const { yearsText, detailsText, titleText } = textElements\n\n    // 获得子精灵数组\n    const spriteChildren = sprites.children\n    spriteChildren.forEach(element => {\n      // 当前元素/图片/资源名\n      const currName = element.texture.textureCacheIds[0]\n      if (currHitBuild !== currName) {\n        // 碰撞属性\n        // 由于动画效果是，人物不动，景动，所以调用第五个参数为true改为全局坐标检测\n        if (Bump.hit(element, sprite, false, false, true)) {\n          currHitBuild = currName\n          // 找到对应的建筑并展示相关说明\n          bulidsJson.forEach(element => {\n            if (element.img_url === currName) {\n              detailsText.text = '⠀⠀' + element.detail\n              titleText.text = element.title\n              yearsText.text = element.date\n            }\n          })\n        }\n      }\n    })\n  }\n\n  return (\n    <div id={'gamePine'} style={{\n      width: props.width,\n      display: 'inline-block'\n    }}/>\n  )\n}\n\nexport default GamePine\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react'\nimport './App.css'\n// eslint-disable-next-line no-unused-vars\nimport GamePine from './GamePine'\nfunction App () {\n  return (\n    <div className=\"App\">\n      <GamePine width={1000}/>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}